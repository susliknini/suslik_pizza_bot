import asyncio
import logging
import os
import time
import math
from datetime import datetime
from typing import List, Tuple

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from telethon import TelegramClient
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import InputPeerChannel, InputReportReasonSpam

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = '24463378'
API_HASH = 'e7c3fb1d6c2a8b3a9422607a350754c1'
BOT_TOKEN = '8290891253:AAFbnBJPgjiUUOzeGANjDonOQWRAhSi2ni4'

ADMIN_IDS = [8075123058]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
SUPPORT_ID = 1637959612  # ID —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
order_counter = 1
sessions_folder = "sessions"
active_reports = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üü¢ –î–æ–Ω–æ—Å", callback_data="report")],
    [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
    [InlineKeyboardButton(text="üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="donate")],
    [InlineKeyboardButton(text="üõ† –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
])

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π Telethon
def load_sessions() -> List[TelegramClient]:
    clients = []
    if not os.path.exists(sessions_folder):
        os.makedirs(sessions_folder)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {sessions_folder}")
        return clients
    
    for file in os.listdir(sessions_folder):
        if file.endswith('.session'):
            session_path = os.path.join(sessions_folder, file[:-8])
            try:
                client = TelegramClient(session_path, API_ID, API_HASH)
                clients.append(client)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {file}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ {file}: {e}")
    
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(clients)}")
    return clients

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã
async def send_report_sync(client: TelegramClient, message_link: str) -> Tuple[bool, str]:
    try:
        if 't.me/' in message_link:
            parts = message_link.split('/')
            if len(parts) >= 2:
                channel_username = parts[-2]
                message_id = int(parts[-1])
                
                await client.start()
                entity = await client.get_entity(channel_username)
                peer = InputPeerChannel(entity.id, entity.access_hash)
                
                await client(ReportRequest(
                    peer=peer,
                    id=[message_id],
                    reason=InputReportReasonSpam(),
                    message="–°–ø–∞–º"
                ))
                
                await client.disconnect()
                return True, "–î–û–°–¢–ê–í–õ–ï–ù–û"
                
    except Exception as e:
        error_msg = str(e)
        if "FLOOD" in error_msg.upper():
            return False, "–§–õ–£–î"
        elif "AUTH" in error_msg.upper() or "SESSION" in error_msg.upper():
            return False, "–ù–ï–í–ê–õ–ò–î"
        else:
            if len(error_msg) > 50:
                error_msg = error_msg[:47] + "..."
            return False, f"–û–®–ò–ë–ö–ê: {error_msg}"
    
    return False, "–ù–ï–í–ê–õ–ò–î"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! SuslikPizza –ª—É—á—à–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –≥–æ—Ä–æ–¥–µ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ (—Å—É—Å–ª–∏–∫–æ –ª–∞–Ω–¥–∏–≤–º—Ñ)! üçï",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–Ω–æ—Å"
@dp.callback_query(F.data == "report")
async def report_handler(callback: types.CallbackQuery):
    await callback.message.answer("üì© –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º:")
    active_reports[callback.from_user.id] = "waiting_link"
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
@dp.message(F.text)
async def process_message(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Å—Å—ã–ª–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in active_reports and active_reports[user_id] == "waiting_link":
        if 't.me/' in message.text:
            await process_link(message)
        else:
            await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É Telegram. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: https://t.me/username/123")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    elif user_id in active_reports and active_reports[user_id] == "waiting_support":
        await process_support(message)
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        pass

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏
async def process_link(message: types.Message):
    link = message.text.strip()
    user_id = message.from_user.id
    global order_counter
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª
    log_filename = f"SuslikPizza_log{order_counter}.txt"
    order_counter += 1
    
    with open(log_filename, 'w', encoding='utf-8') as log_file:
        log_file.write(f"SuslikPizza log | botnet-method\n")
        log_file.write("-" * 42 + "\n")
        log_file.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} (@{message.from_user.username})\n")
        log_file.write(f"–°—Å—ã–ª–∫–∞: {link}\n")
        log_file.write("-" * 42 + "\n")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    progress_message = await message.answer("üöÄ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –∂–∞–ª–æ–±...\n\n‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ± 0%")
    
    clients = load_sessions()
    total_reports = len(clients) * 5  # 5 –∂–∞–ª–æ–± —Å –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
    successful = 0
    failed = 0
    floods = 0
    current_report = 0
    
    if total_reports == 0:
        await progress_message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π! –î–æ–±–∞–≤—å—Ç–µ .session —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É sessions/")
        del active_reports[user_id]
        return
    
    for client_index, client in enumerate(clients):
        for i in range(5):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                current_report += 1
                progress_percent = min(math.floor((current_report / total_reports) * 100), 100)
                progress_bar = "‚ñ∞" * math.floor(progress_percent / 10) + "‚ñ±" * (10 - math.floor(progress_percent / 10))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                try:
                    await progress_message.edit_text(
                        f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±...\n\n"
                        f"{progress_bar} {progress_percent}%\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful} | ‚ùå –û—à–∏–±–∫–∏: {failed} | üåä –§–ª—É–¥—ã: {floods}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É
                result, status = await send_report_sync(client, link)
                
                current_time = datetime.now().strftime("%H:%M:%S")
                session_name = os.path.basename(client.session.filename) if hasattr(client, 'session') else f"session_{client_index}"
                
                log_entry = f"[{current_time}] {session_name} -> {link} - [{status}]\n"
                
                with open(log_filename, 'a', encoding='utf-8') as log_file:
                    log_file.write(log_entry)
                
                if status == "–î–û–°–¢–ê–í–õ–ï–ù–û":
                    successful += 1
                elif status == "–§–õ–£–î":
                    floods += 1
                else:
                    failed += 1
                
                await asyncio.sleep(3)
                
            except Exception as e:
                current_time = datetime.now().strftime("%H:%M:%S")
                session_name = f"session_{client_index}"
                error_msg = str(e)
                if len(error_msg) > 50:
                    error_msg = error_msg[:47] + "..."
                log_entry = f"[{current_time}] {session_name} -> {link} - [–û–®–ò–ë–ö–ê: {error_msg}]\n"
                
                with open(log_filename, 'a', encoding='utf-8') as log_file:
                    log_file.write(log_entry)
                
                failed += 1
                logger.error(f"–û—à–∏–±–∫–∞: {e}")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
    with open(log_filename, 'a', encoding='utf-8') as log_file:
        log_file.write("-" * 42 + "\n")
        log_file.write(f"–£—Å–ø–µ—à–Ω–æ: {successful}\n")
        log_file.write(f"–ù–µ—É—Å–ø–µ—à–Ω–æ: {failed}\n")
        log_file.write(f"–§–ª—É–¥–æ–≤: {floods}\n")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–∞ 100%
    try:
        await progress_message.edit_text(
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞ 100%\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful} | ‚ùå –û—à–∏–±–∫–∏: {failed} | üåä –§–ª—É–¥—ã: {floods}\n"
            f"üìä –ì–æ—Ç–æ–≤–ª—é –æ—Ç—á–µ—Ç..."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        document = FSInputFile(log_filename)
        await message.answer_document(
            document,
            caption=f"üìä –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!\n"
                   f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}\n"
                   f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {failed}\n"
                   f"üåä –§–ª—É–¥–æ–≤: {floods}\n"
                   f"üìä –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {total_reports}"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        try:
            await progress_message.delete()
        except:
            pass
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await message.answer(
            f"üìä –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}\n"
            f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {failed}\n"
            f"üåä –§–ª—É–¥–æ–≤: {floods}\n"
            f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {e}"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            document = FSInputFile(log_filename)
            await bot.send_document(
                admin_id,
                document,
                caption=f"üìã –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç @{message.from_user.username}\n"
                       f"üë§ ID: {message.from_user.id}\n"
                       f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful} | ‚ùå –û—à–∏–±–∫–∏: {failed} | üåä –§–ª—É–¥—ã: {floods}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(log_filename)
    except:
        pass
    
    if user_id in active_reports:
        del active_reports[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.callback_query(F.data == "profile")
async def profile_handler(callback: types.CallbackQuery):
    user = callback.from_user
    profile_text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üÜî ID: {user.id}\n"
        f"üìõ Username: @{user.username}\n"
        f"üëÄ –ò–º—è: {user.first_name} {user.last_name or ''}"
    )
    await callback.message.answer(profile_text)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
@dp.callback_query(F.data == "support")
async def support_handler(callback: types.CallbackQuery):
    await callback.message.answer("üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
    active_reports[callback.from_user.id] = "waiting_support"
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
async def process_support(message: types.Message):
    support_text = (
        f"üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n"
        f"üë§ –û—Ç: @{message.from_user.username}\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üìù –¢–µ–∫—Å—Ç:\n{message.text}"
    )
    
    for admin_id in ADMIN_IDS + [SUPPORT_ID]:
        try:
            await bot.send_message(admin_id, support_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    await message.answer("‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
    
    if message.from_user.id in active_reports:
        del active_reports[message.from_user.id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
@dp.callback_query(F.data == "donate")
async def donate_handler(callback: types.CallbackQuery):
    await callback.message.answer(
        "üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        "https://t.me/send?start=IV2HJyZJ6rrz\n\n"
        "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! üíñ"
    )
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    if not os.path.exists(sessions_folder):
        os.makedirs(sessions_folder)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {sessions_folder}")
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
