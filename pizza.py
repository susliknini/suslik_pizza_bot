import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import asyncio

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7764212325:AAGbquqNgc5b0BNMYq8FMVSic7PWg5n3OK0"
ADMIN_IDS = [8181512568]  # –í–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
BOT_USERNAME = "SuslikPizzaBot"  # –ë–µ–∑ @ –µ—Å–ª–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å—Å—ã–ª–∫–∞—Ö
VIP_PHRASE = "–ø–∏—Ü—Ü–∞ - @SuslikPizzaBot"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
promo_text = None  # –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –ø–æ–¥ –∑–∞–∫–∞–∑–∞–º–∏
users_db = {}      # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
vip_users = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
orders_history = [] # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤

# –°—Ç–∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
STYLES = {
    "header": "üçï <b>{text}</b> üçï",
    "warning": "‚ö†Ô∏è <i>{text}</i>",
    "success": "‚úÖ <b>{text}</b>",
    "vip": "üåü {text}",
    "admin": "üëë {text}",
    "delivery": "üöö {text}",
    "pizza": "üçï {text}",
    "love": "‚ù§Ô∏è {text}"
}

# –ú–µ–Ω—é –ø–∏—Ü—Ü
PIZZA_TYPES = {
    "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–±–∞–∑–∏–ª–∏–∫"],
    "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏": ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–ø–µ–ø–ø–µ—Ä–æ–Ω–∏"],
    "–ì–∞–≤–∞–π—Å–∫–∞—è": ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–≤–µ—Ç—á–∏–Ω–∞", "–∞–Ω–∞–Ω–∞—Å—ã"],
    "4 –°—ã—Ä–∞": ["—Å–ª–∏–≤–æ—á–Ω—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–ø–∞—Ä–º–µ–∑–∞–Ω", "–¥–æ—Ä –±–ª—é", "—á–µ–¥–¥–µ—Ä"],
    "–ú—è—Å–Ω–∞—è": ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–ø–µ–ø–ø–µ—Ä–æ–Ω–∏", "–≤–µ—Ç—á–∏–Ω–∞", "–±–µ–∫–æ–Ω"],
    "–í–µ–≥–∞–Ω": ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "—Ç–æ—Ñ—É", "–≥—Ä–∏–±—ã", "–æ–ª–∏–≤–∫–∏", "–ø–µ—Ä–µ—Ü"]
}

# –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø–∏—Ü—Ü—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
PIZZA_PROGRESS = [
    ("üßë‚Äçüç≥ –ù–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞—à—É –ø–∏—Ü—Ü—É...", 0),
    ("ü´ì –†–∞—Å–∫–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ...", 15),
    ("üçÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å...", 25),
    ("üßÄ –©–µ–¥—Ä–æ —Å—ã–ø–µ–º —Å—ã—Ä...", 40),
    ("üçñ –ö–ª–∞–¥–µ–º –Ω–∞—á–∏–Ω–∫—É...", 55),
    ("üå∂Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∏...", 65),
    ("üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–µ—á—å...", 75),
    ("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å...", 85),
    ("üì¶ –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º...", 90),
    ("üõµ –ü–µ—Ä–µ–¥–∞–µ–º –∫—É—Ä—å–µ—Ä—É...", 100)
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class OrderStates(StatesGroup):
    waiting_for_address = State()
    waiting_for_pizza_type = State()

class AdminStates(StatesGroup):
    waiting_for_broadcast = State()
    waiting_for_promo = State()
    waiting_for_ad = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(buttons, row_width=2):
    keyboard = InlineKeyboardMarkup(row_width=row_width)
    keyboard.add(*buttons)
    return keyboard

def get_main_menu(user_id: int):
    buttons = [
        InlineKeyboardButton("üçï –ú–µ–Ω—é", callback_data="menu"),
        InlineKeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="order"),
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        InlineKeyboardButton("‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", callback_data="about")
    ]
    
    if user_id in ADMIN_IDS:
        buttons.append(InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    return create_keyboard(buttons)

def get_pizza_menu():
    buttons = [
        InlineKeyboardButton(f"{name}", callback_data=f"pizza_{name}") 
        for name in PIZZA_TYPES.keys()
    ]
    buttons.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return create_keyboard(buttons)

def get_admin_panel():
    buttons = [
        InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast"),
        InlineKeyboardButton("üìù –ü—Ä–æ–º–æ-—Ç–µ–∫—Å—Ç", callback_data="set_promo"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("üì® –†–µ–∫–ª–∞–º–∞", callback_data="create_ad"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ", callback_data="remove_promo"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
    ]
    return create_keyboard(buttons, row_width=1)

def get_back_button():
    return InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
def format_message(style, text, **kwargs):
    return STYLES[style].format(text=text, **kwargs)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ VIP —Å—Ç–∞—Ç—É—Å–∞
def check_vip_status(user: types.User):
    try:
        return hasattr(user, 'bio') and user.bio and VIP_PHRASE.lower() in user.bio.lower()
    except:
        return False

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_user(user: types.User):
    user_id = user.id
    is_vip = check_vip_status(user)
    
    if user_id not in users_db:
        users_db[user_id] = {
            'name': user.full_name,
            'username': user.username,
            'registration_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'orders_count': 0,
            'is_vip': is_vip,
            'vip_since': datetime.now().strftime("%Y-%m-%d %H:%M:%S") if is_vip else None,
            'favorite_pizza': None
        }
    
    if is_vip and not users_db[user_id]['is_vip']:
        users_db[user_id]['is_vip'] = True
        users_db[user_id]['vip_since'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        if user.username:
            vip_users.add(user.username.lower())
        return True
    
    return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start', 'pizza'])
async def handle_commands(message: types.Message):
    user = message.from_user
    chat_type = message.chat.type
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    vip_updated = await update_user(user)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /pizza –≤ —á–∞—Ç–µ
    if message.text.startswith('/pizza') and chat_type != 'private':
        parts = message.text.split(maxsplit=1)
        if len(parts) > 1:
            await process_group_order(message, parts[1].strip())
        else:
            await message.reply(
                format_message("warning", "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å: /pizza [–∞–¥—Ä–µ—Å]") + 
                "\n–ü—Ä–∏–º–µ—Ä: <code>/pizza —É–ª. –ü—É—à–∫–∏–Ω–∞ 15, –∫–≤. 42</code>"
            )
        return
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = format_message("header", "Suslik Pizza Bot - –ª—É—á—à–∞—è –ø–∏—Ü—Ü–∞ –≤ –≥–æ—Ä–æ–¥–µ!") + "\n\n"
    welcome_text += format_message("pizza", "–î–æ—Å—Ç–∞–≤–ª—è–µ–º —Å –ª—é–±–æ–≤—å—é –∏ —Ö—Ä—É—Å—Ç—è—â–µ–π –∫–æ—Ä–æ—á–∫–æ–π!") + "\n\n"
    welcome_text += format_message("vip", f"–î–æ–±–∞–≤—å –≤ –±–∏–æ '{VIP_PHRASE}' –¥–ª—è VIP —Å—Ç–∞—Ç—É—Å–∞")
    
    if vip_updated:
        welcome_text += "\n\n" + format_message("vip", "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ VIP —Å—Ç–∞—Ç—É—Å!")
    
    try:
        await message.answer_photo(
            InputFile('start.jpg'),
            caption=welcome_text,
            reply_markup=get_main_menu(user.id)
        )
    except:
        await message.answer(
            welcome_text,
            reply_markup=get_main_menu(user.id)
        )
    
    if chat_type == 'private':
        await message.delete()

@dp.message_handler(commands=['–≤—ã—Ö–æ–¥'])
async def exit_bot(message: types.Message):
    if message.chat.type == 'private':
        await message.answer(format_message("warning", "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!"))
        return
    
    if message.from_user.id in ADMIN_IDS:
        await message.answer(format_message("success", "–ë–æ—Ç –ø–æ–∫–∏–¥–∞–µ—Ç —á–∞—Ç. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"))
        await bot.leave_chat(message.chat.id)
    else:
        await message.answer(format_message("warning", "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith('pizza_'))
async def handle_pizza_selection(callback_query: types.CallbackQuery, state: FSMContext):
    pizza_type = callback_query.data[6:]
    await bot.answer_callback_query(callback_query.id)
    
    await bot.send_message(
        callback_query.from_user.id,
        format_message("header", f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {pizza_type}") + "\n" +
        format_message("pizza", f"–°–æ—Å—Ç–∞–≤: {', '.join(PIZZA_TYPES[pizza_type])}") + "\n\n" +
        format_message("delivery", "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"),
        reply_markup=get_back_button()
    )
    
    async with state.proxy() as data:
        data['pizza_type'] = pizza_type
    
    await OrderStates.waiting_for_address.set()

@dp.callback_query_handler(lambda c: c.data in ['menu', 'order', 'profile', 'about', 
                                              'admin_panel', 'broadcast', 'back', 
                                              'stats', 'set_promo', 'create_ad', 'remove_promo'])
async def handle_callbacks(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    
    if callback_query.data == 'menu':
        await show_menu(callback_query)
    elif callback_query.data == 'order':
        await start_order(callback_query)
    elif callback_query.data == 'profile':
        await show_profile(callback_query)
    elif callback_query.data == 'about':
        await show_about(callback_query)
    elif callback_query.data == 'admin_panel' and user_id in ADMIN_IDS:
        await show_admin_panel(callback_query)
    elif callback_query.data == 'broadcast' and user_id in ADMIN_IDS:
        await start_broadcast(callback_query, state)
    elif callback_query.data == 'stats' and user_id in ADMIN_IDS:
        await show_stats(callback_query)
    elif callback_query.data == 'set_promo' and user_id in ADMIN_IDS:
        await set_promo_text(callback_query, state)
    elif callback_query.data == 'create_ad' and user_id in ADMIN_IDS:
        await create_advertisement(callback_query, state)
    elif callback_query.data == 'remove_promo' and user_id in ADMIN_IDS:
        await remove_promo_text(callback_query)
    elif callback_query.data == 'back':
        await back_to_main(callback_query)

# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
async def show_menu(callback_query: types.CallbackQuery):
    menu_text = format_message("header", "–ù–∞—à–µ –º–µ–Ω—é") + "\n\n"
    for name, ingredients in PIZZA_TYPES.items():
        menu_text += f"<b>{name}</b>\nüçΩÔ∏è {', '.join(ingredients)}\n\n"
    
    menu_text += format_message("money", "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞!") + "\n"
    menu_text += format_message("love", "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!")
    
    await bot.send_message(
        callback_query.from_user.id,
        menu_text,
        reply_markup=get_back_button()
    )

async def start_order(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        format_message("header", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ü—Ü—ã:"),
        reply_markup=get_pizza_menu()
    )

async def show_profile(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_data = users_db.get(user_id, {})
    
    profile_text = format_message("header", "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å") + "\n\n"
    profile_text += f"üë§ –ò–º—è: {user_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    profile_text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data.get('registration_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    profile_text += f"üõí –ó–∞–∫–∞–∑–æ–≤: {user_data.get('orders_count', 0)}\n"
    
    if user_data.get('is_vip'):
        profile_text += format_message("vip", f"VIP —Å—Ç–∞—Ç—É—Å —Å {user_data.get('vip_since')}") + "\n"
    
    if user_data.get('favorite_pizza'):
        profile_text += f"üçï –õ—é–±–∏–º–∞—è –ø–∏—Ü—Ü–∞: {user_data['favorite_pizza']}\n"
    
    profile_text += "\n" + format_message("love", "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!")
    
    await bot.send_message(
        user_id,
        profile_text,
        reply_markup=get_back_button()
    )

async def show_about(callback_query: types.CallbackQuery):
    about_text = format_message("header", "–û —Å–µ—Ä–≤–∏—Å–µ Suslik Pizza") + "\n\n"
    about_text += format_message("pizza", "–û—Å–Ω–æ–≤–∞–Ω–æ –≤ 2023 –≥–æ–¥—É") + "\n"
    about_text += format_message("love", "–î–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—á–∞—Å—Ç—å–µ –≤ –∫–∞–∂–¥–æ–π –ø–∏—Ü—Ü–µ") + "\n"
    about_text += format_message("money", "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ 24/7") + "\n\n"
    about_text += format_message("admin", "–®–µ—Ñ-–ø–æ–≤–∞—Ä: @Diana873892k") + "\n"
    about_text += format_message("pizza", f"–ó–∞–∫–∞–∑–∞—Ç—å: {BOT_USERNAME}") + "\n\n"
    about_text += format_message("vip", f"–î–æ–±–∞–≤—å—Ç–µ –≤ –±–∏–æ '{VIP_PHRASE}' –¥–ª—è VIP —Å—Ç–∞—Ç—É—Å–∞")
    
    await bot.send_message(
        callback_query.from_user.id,
        about_text,
        reply_markup=get_back_button()
    )

async def show_admin_panel(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        format_message("admin", "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å") + "\n" +
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_db)}\n" +
        f"üõí –ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {len([o for o in orders_history if o['date'].date() == datetime.now().date()])}",
        reply_markup=get_admin_panel()
    )

async def show_stats(callback_query: types.CallbackQuery):
    total_users = len(users_db)
    total_orders = sum(user['orders_count'] for user in users_db.values())
    active_vip = sum(user['is_vip'] for user in users_db.values())
    
    popular_pizza = {}
    for order in orders_history:
        if 'pizza_type' in order:
            popular_pizza[order['pizza_type']] = popular_pizza.get(order['pizza_type'], 0) + 1
    
    stats_text = format_message("header", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞") + "\n\n"
    stats_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    stats_text += f"üõí –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
    stats_text += f"üåü VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_vip}\n"
    
    if popular_pizza:
        top_pizza = max(popular_pizza.items(), key=lambda x: x[1])
        stats_text += f"\nüçï –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –ø–∏—Ü—Ü–∞: {top_pizza[0]} ({top_pizza[1]} –∑–∞–∫–∞–∑–æ–≤)"
    
    await bot.send_message(
        callback_query.from_user.id,
        stats_text,
        reply_markup=get_admin_panel()
    )

async def back_to_main(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        format_message("header", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        reply_markup=get_main_menu(callback_query.from_user.id)
    )

# –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
async def start_broadcast(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(
        callback_query.from_user.id,
        format_message("admin", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:"),
        reply_markup=get_back_button()
    )
    await AdminStates.waiting_for_broadcast.set()

async def set_promo_text(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(
        callback_query.from_user.id,
        format_message("admin", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–æ-–ø–æ–¥–ø–∏—Å–∏:"),
        reply_markup=get_back_button()
    )
    await AdminStates.waiting_for_promo.set()

async def create_advertisement(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(
        callback_query.from_user.id,
        format_message("admin", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã (–º–æ–∂–Ω–æ —Å —Ñ–æ—Ç–æ):"),
        reply_markup=get_back_button()
    )
    await AdminStates.waiting_for_ad.set()

async def remove_promo_text(callback_query: types.CallbackQuery):
    global promo_text
    promo_text = None
    await bot.send_message(
        callback_query.from_user.id,
        format_message("success", "–ü—Ä–æ–º–æ-—Ç–µ–∫—Å—Ç —É–¥–∞–ª–µ–Ω!"),
        reply_markup=get_admin_panel()
    )

@dp.message_handler(state=AdminStates.waiting_for_broadcast)
async def process_broadcast(message: types.Message, state: FSMContext):
    success = 0
    errors = 0
    
    for user_id in users_db:
        try:
            await bot.send_message(user_id, message.text)
            success += 1
            await asyncio.sleep(0.1)
        except:
            errors += 1
    
    await message.answer(
        format_message("success", f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {errors}"),
        reply_markup=get_admin_panel()
    )
    await state.finish()

@dp.message_handler(state=AdminStates.waiting_for_promo)
async def process_promo_text(message: types.Message, state: FSMContext):
    global promo_text
    promo_text = message.text
    await message.answer(
        format_message("success", "–ü—Ä–æ–º–æ-—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"),
        reply_markup=get_admin_panel()
    )
    await state.finish()

@dp.message_handler(content_types=['text', 'photo'], state=AdminStates.waiting_for_ad)
async def process_advertisement(message: types.Message, state: FSMContext):
    success = 0
    errors = 0
    
    for user_id in users_db:
        try:
            if message.photo:
                await bot.send_photo(
                    user_id,
                    message.photo[-1].file_id,
                    caption=message.caption if message.caption else ""
                )
            else:
                await bot.send_message(user_id, message.text)
            success += 1
            await asyncio.sleep(0.1)
        except:
            errors += 1
    
    await message.answer(
        format_message("success", f"–†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {errors}"),
        reply_markup=get_admin_panel()
    )
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤
async def process_group_order(message: types.Message, address: str):
    user = message.from_user
    user_id = user.id
    
    if user_id not in users_db:
        await update_user(user)
        if user_id not in users_db:
            await message.reply(format_message("warning", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"))
            return
    
    user_data = users_db[user_id]
    user_data['orders_count'] += 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∏—Ü—Ü—ã (–¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ - —Å–ª—É—á–∞–π–Ω—ã–π)
    pizza_type = random.choice(list(PIZZA_TYPES.keys()))
    
    # VIP –±–æ–Ω—É—Å
    is_vip = user_data.get('is_vip', False)
    pizzas = random.randint(50, 175) * (2 if is_vip else 1)
    
    # –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    progress_msg = await send_pizza_progress(
        message.chat.id,
        user_data['name'],
        address,
        pizza_type,
        is_vip
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é
    orders_history.append({
        'user_id': user_id,
        'username': user.username,
        'address': address,
        'pizzas': pizzas,
        'pizza_type': pizza_type,
        'is_vip': is_vip,
        'date': datetime.now()
    })
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await complete_order(
        message.chat.id,
        progress_msg,
        user_data['name'],
        address,
        pizzas,
        pizza_type,
        is_vip
    )
    
    # –õ–æ–≥–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    log_text = format_message("header", "–ù–û–í–´–ô –ó–ê–ö–ê–ó") + "\n\n"
    log_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data.get('username', '–Ω–µ—Ç')}\n"
    log_text += f"üåü VIP: {'–î–∞' if is_vip else '–ù–µ—Ç'}\n"
    log_text += f"üçï –ü–∏—Ü—Ü–∞: {pizza_type}\n"
    log_text += f"üìç –ê–¥—Ä–µ—Å: {address}\n"
    log_text += f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n"
    log_text += f"üçΩÔ∏è –ü–∏—Ü—Ü: {pizzas}\n\n"
    log_text += format_message("love", "–ï–¥–∞ –æ—Ç —Å—É—Å–ª–∏–∫–æ–≤ –∑–∞—à–ª–∞)")
    
    await send_to_admins(log_text)

@dp.message_handler(state=OrderStates.waiting_for_address)
async def process_private_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    if user_id not in users_db:
        await message.answer(format_message("warning", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start"))
        await state.finish()
        return
    
    user_data = users_db[user_id]
    user_data['orders_count'] += 1
    address = message.text
    
    async with state.proxy() as data:
        pizza_type = data.get('pizza_type')
    
    # VIP –±–æ–Ω—É—Å
    is_vip = user_data.get('is_vip', False)
    pizzas = random.randint(50, 175) * (2 if is_vip else 1)
    
    # –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    progress_msg = await send_pizza_progress(
        message.chat.id,
        user_data['name'],
        address,
        pizza_type,
        is_vip
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ª—é–±–∏–º—É—é –ø–∏—Ü—Ü—É
    if pizza_type:
        user_data['favorite_pizza'] = pizza_type
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é
    orders_history.append({
        'user_id': user_id,
        'username': message.from_user.username,
        'address': address,
        'pizzas': pizzas,
        'pizza_type': pizza_type,
        'is_vip': is_vip,
        'date': datetime.now()
    })
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await complete_order(
        message.chat.id,
        progress_msg,
        user_data['name'],
        address,
        pizzas,
        pizza_type,
        is_vip
    )
    
    # –õ–æ–≥–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    log_text = format_message("header", "–ù–û–í–´–ô –ó–ê–ö–ê–ó") + "\n\n"
    log_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data.get('username', '–Ω–µ—Ç')}\n"
    log_text += f"üåü VIP: {'–î–∞' if is_vip else '–ù–µ—Ç'}\n"
    log_text += f"üçï –ü–∏—Ü—Ü–∞: {pizza_type}\n"
    log_text += f"üìç –ê–¥—Ä–µ—Å: {address}\n"
    log_text += f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n"
    log_text += f"üçΩÔ∏è –ü–∏—Ü—Ü: {pizzas}\n\n"
    log_text += format_message("love", "–ï–¥–∞ –æ—Ç —Å—É—Å–ª–∏–∫–æ–≤ –∑–∞—à–ª–∞)")
    
    await send_to_admins(log_text)
    await state.finish()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def send_pizza_progress(chat_id, user_name, address, pizza_type, is_vip=False):
    progress_message = await bot.send_message(
        chat_id,
        format_message("delivery", f"–ù–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è {user_name}")
    )
    
    for step, percent in PIZZA_PROGRESS:
        text = f"{step} {percent}%\n"
        text += f"üìç –ê–¥—Ä–µ—Å: {address}\n"
        text += f"üçï –ü–∏—Ü—Ü–∞: {pizza_type}\n"
        if is_vip:
            text += format_message("vip", "VIP –∑–∞–∫–∞–∑ x2!")
        
        await bot.edit_message_text(
            text,
            chat_id,
            progress_message.message_id
        )
        await asyncio.sleep(random.uniform(4, 12))
    
    return progress_message.message_id

async def complete_order(chat_id, message_id, user_name, address, pizzas, pizza_type, is_vip=False):
    text = format_message("success", f"–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! {user_name}") + "\n"
    text += f"üçï –ü–∏—Ü—Ü: {pizzas}\n"
    text += f"üìç –ê–¥—Ä–µ—Å: {address}\n"
    text += f"üçΩÔ∏è –¢–∏–ø: {pizza_type}\n"
    
    if is_vip:
        text += "\n" + format_message("vip", "–°–ø–∞—Å–∏–±–æ –∑–∞ VIP —Å—Ç–∞—Ç—É—Å!") + "\n"
    
    if promo_text:
        text += "\n" + format_message("pizza", promo_text)
    
    text += "\n" + format_message("love", "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!")
    
    await bot.edit_message_text(
        text,
        chat_id,
        message_id,
        reply_markup=get_main_menu(chat_id) if chat_id > 0 else None
    )

async def send_to_admins(text: str):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text)
        except:
            continue

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)



