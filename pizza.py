import asyncio
import logging
import os
import time
import math
import random
from datetime import datetime
from typing import List, Tuple
import nest_asyncio

# –ü—Ä–∏–º–µ–Ω—è–µ–º patch –¥–ª—è nested event loops
nest_asyncio.apply()

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = '8290891253:AAFbnBJPgjiUUOzeGANjDonOQWRAhSi2ni4'

ADMIN_IDS = [8075123058]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
SUPPORT_ID = 1637959612  # ID —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
order_counter = 1
sessions_folder = "sessions"
active_reports = {}

# –°–ø–∏—Å–∫–∏ –Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—á—Ç
NICKS = [
    "fgsdgdf", "kokainj22", "lodog", "darkmaster", "shadowfax", "neonlight",
    "cybsdfsadfedfsafrpunk", "quasadfantufsafdm", "phanfsdaftom", "stfsdfasealth", "vorsatesafdx", "blasaffsaze", "frsfaost",
    "nfsdfightwsdfaolf", "silsdfsadfentkill", "ghosdfasadfsadfstridsfdaer", "blsdfoodfsafsadhousand", "snipfsdfser", "warlord",
    "demoldsafafsition", "hasadfsvoc", "chfdsafaaos", "madfsfsayhem", "rdfgdfeaper", "viwerwper", "cowertbertra", "ptrwtwyttwrethon",
    "dragdsfason", "phofsdfenix", "raptdsggor", "hawsgak", "eagsdfasle", "falcosfaasn", "woasf lf", "tigsdfasder",
    "pantsfdsafher", "leodfsapard", "jasdfsadfsaguar", "lyasdfsanx", "beagdsfadfr", "shasdafsark", "orsdfsaca", "krsfdsaaken"
]

EMAIL_DOMAINS = ["rambler.ru", "gmail.com", "mail.ru", "yandex.ru", "yahoo.com"]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞
methods_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="ü§ñ Botnet –º–µ—Ç–æ–¥", callback_data="method_botnet")],
    [InlineKeyboardButton(text="üìß Email –º–µ—Ç–æ–¥", callback_data="method_email")],
    [InlineKeyboardButton(text="üîê DSA –º–µ—Ç–æ–¥", callback_data="method_dsa")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
])

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üü¢ –î–æ–Ω–æ—Å", callback_data="report")],
    [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
    [InlineKeyboardButton(text="üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="donate")],
    [InlineKeyboardButton(text="üõ† –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
])

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π (–∏–º–∏—Ç–∞—Ü–∏—è)
def load_sessions() -> List[str]:
    sessions = []
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Å—Å–∏–π
    for i in range(1, random.randint(25, 35)):  # 25-35 —Å–µ—Å—Å–∏–π
        sessions.append(f"telethon_{random.randint(100000000, 999999999)}")
    return sessions

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è email –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –Ω–∏–∫–∞–º–∏
def generate_emails() -> List[str]:
    emails = []
    # –°–æ–∑–¥–∞–µ–º 30-40 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö email –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    used_nicks = set()
    
    while len(emails) < random.randint(30, 40):
        nick = random.choice(NICKS)
        if nick not in used_nicks:
            used_nicks.add(nick)
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            numbers = str(random.randint(1, 999))
            domain = random.choice(EMAIL_DOMAINS)
            email = f"{nick}{numbers}@{domain}"
            emails.append(email)
    
    return emails

# –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã —á–µ—Ä–µ–∑ Botnet
async def send_report_botnet(session_name: str, message_link: str) -> Tuple[bool, str]:
    try:
        await asyncio.sleep(random.uniform(0.1, 0.5))
        rand = random.random()
        if rand < 0.85: return True, "–î–û–°–¢–ê–í–õ–ï–ù–û"
        elif rand < 0.95: return False, random.choice(["–ù–ï–í–ê–õ–ò–î", "–û–®–ò–ë–ö–ê: –¢–∞–π–º–∞—É—Ç"])
        else: return False, "–§–õ–£–î"
    except Exception as e:
        return False, f"–û–®–ò–ë–ö–ê: {str(e)[:30]}"

# –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã —á–µ—Ä–µ–∑ Email
async def send_report_email(email: str, message_link: str) -> Tuple[bool, str]:
    try:
        await asyncio.sleep(random.uniform(0.05, 0.3))
        rand = random.random()
        if rand < 0.75: return True, "–î–û–°–¢–ê–í–õ–ï–ù–û"
        elif rand < 0.90: return False, random.choice(["EMAIL BOUNCE", "SPAM FILTER"])
        else: return False, "QUOTA EXCEEDED"
    except Exception as e:
        return False, f"EMAIL ERROR: {str(e)[:30]}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! SuslikPizza –ª—É—á—à–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –≥–æ—Ä–æ–¥–µ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ (—Å—É—Å–ª–∏–∫–æ –ª–∞–Ω–¥–∏–≤–º—Ñ)! üçï",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "üü¢ –î–æ–Ω–æ—Å - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç - –ø–æ–º–æ—á—å —Ä–∞–∑–≤–∏—Ç–∏—é –±–æ—Ç–∞\n"
        "üõ† –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –Ω–∏–∂–µ!"
    )
    await message.answer(help_text, reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–Ω–æ—Å"
@dp.callback_query(F.data == "report")
async def report_handler(callback: types.CallbackQuery):
    await callback.message.answer("üì© –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º:")
    active_reports[callback.from_user.id] = "waiting_link"
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞
@dp.callback_query(F.data.startswith("method_"))
async def method_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    method = callback.data.split("_")[1]
    
    if method == "dsa":
        await callback.message.answer("–≤ —Ä–∞—Ä–∞–±–æ—Ç–∫–µ —ã—ã")
        await callback.answer()
        return
    
    if user_id in active_reports and active_reports[user_id].startswith("waiting_method_"):
        link = active_reports[user_id].split("_", 2)[2]
        active_reports[user_id] = f"processing_{method}_{link}"
        await callback.message.answer(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {method.upper()} cyjcbyn...")
        await process_link(callback.message, method, link)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(F.data == "back_to_main")
async def back_handler(callback: types.CallbackQuery):
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.callback_query(F.data == "profile")
async def profile_handler(callback: types.CallbackQuery):
    user = callback.from_user
    profile_text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üÜî ID: {user.id}\n"
        f"üìõ Username: @{user.username}\n"
        f"üëÄ –ò–º—è: {user.first_name} {user.last_name or ''}"
    )
    await callback.message.answer(profile_text)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
@dp.callback_query(F.data == "support")
async def support_handler(callback: types.CallbackQuery):
    await callback.message.answer("üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
    active_reports[callback.from_user.id] = "waiting_support"
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
@dp.callback_query(F.data == "donate")
async def donate_handler(callback: types.CallbackQuery):
    await callback.message.answer(
        "üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        "https://t.me/send?start=IV2HJyZJ6rrz\n\n"
        "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! üíñ"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text & ~F.command)
async def process_text_message(message: types.Message):
    user_id = message.from_user.id
    
    if user_id in active_reports and active_reports[user_id] == "waiting_link":
        if 't.me/' in message.text:
            link = message.text.strip()
            active_reports[user_id] = f"waiting_method_{link}"
            await message.answer("üîß –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=methods_keyboard)
        else:
            await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É.")
    
    elif user_id in active_reports and active_reports[user_id] == "waiting_support":
        await process_support(message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏
async def process_link(message: types.Message, method: str, link: str):
    user_id = message.from_user.id
    global order_counter
    
    log_filename = f"SuslikPizza_log{order_counter}.txt"
    order_counter += 1
    
    with open(log_filename, 'w', encoding='utf-8') as log_file:
        log_file.write(f"SuslikPizza log | {method.upper()}-method\n")
        log_file.write("-" * 50 + "\n")
        log_file.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} (@{message.from_user.username})\n")
        log_file.write(f"–ú–µ—Ç–æ–¥: {method.upper()}\n")
        log_file.write(f"–°—Å—ã–ª–∫–∞: {link}\n")
        log_file.write(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        log_file.write("-" * 50 + "\n")
    
    progress_message = await message.answer(f"üöÄ –ó–∞–ø—É—Å–∫ {method.upper()} –º–µ—Ç–æ–¥–∞...\n\n‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ± 0%")
    
    successful = 0
    failed = 0
    floods = 0
    
    if method == "botnet":
        items = load_sessions()
        reports_per_item = 3  # 3 –∂–∞–ª–æ–±—ã —Å –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
        send_func = send_report_botnet
        item_type = "—Å–µ—Å—Å–∏—è"
    elif method == "email":
        items = generate_emails()
        reports_per_item = 5  # 5 –∂–∞–ª–æ–± —Å –∫–∞–∂–¥–æ–≥–æ email
        send_func = send_report_email
        item_type = "email"
    else:
        items = []
        reports_per_item = 0
    
    total_reports = len(items) * reports_per_item
    total_reports = min(total_reports, random.randint(110, 160))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 110-160
    
    if total_reports == 0:
        await progress_message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤!")
        return
    
    # –ë—ã—Å—Ç—Ä–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    tasks = []
    current_report = 0
    
    for item in items:
        for i in range(reports_per_item):
            if current_report >= total_reports:
                break
            tasks.append(send_report_task(send_func, item, link, log_filename, item_type))
            current_report += 1
            if current_report % 20 == 0:  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 20 –∑–∞–¥–∞—á
                progress_percent = min(math.floor(current_report / total_reports * 100), 100)
                progress_bar = "‚ñ∞" * math.floor(progress_percent / 10) + "‚ñ±" * (10 - math.floor(progress_percent / 10))
                
                try:
                    await progress_message.edit_text(
                        f"üöÄ {method.upper()} –º–µ—Ç–æ–¥...\n\n"
                        f"{progress_bar} {progress_percent}%\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful} | ‚ùå –û—à–∏–±–∫–∏: {failed} | üåä –§–ª—É–¥—ã: {floods}"
                    )
                except:
                    pass
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –±–∞—Ç—á–∞–º–∏
    batch_size = 25  # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 25 –∂–∞–ª–æ–±
    for i in range(0, len(tasks), batch_size):
        batch = tasks[i:i + batch_size]
        results = await asyncio.gather(*batch, return_exceptions=True)
        
        for result in results:
            if isinstance(result, tuple):
                status = result[1]
                if status == "–î–û–°–¢–ê–í–õ–ï–ù–û":
                    successful += 1
                elif status in ["–§–õ–£–î", "QUOTA EXCEEDED"]:
                    floods += 1
                else:
                    failed += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_percent = min(math.floor((i + len(batch)) / len(tasks) * 100), 100)
        progress_bar = "‚ñ∞" * math.floor(progress_percent / 10) + "‚ñ±" * (10 - math.floor(progress_percent / 10))
        
        try:
            await progress_message.edit_text(
                f"üöÄ {method.upper()} –º–µ—Ç–æ–¥...\n\n"
                f"{progress_bar} {progress_percent}%\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful} | ‚ùå –û—à–∏–±–∫–∏: {failed} | üåä –§–ª—É–¥—ã: {floods}"
            )
        except:
            pass
        
        await asyncio.sleep(0.3)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
    with open(log_filename, 'a', encoding='utf-8') as log_file:
        log_file.write("-" * 50 + "\n")
        log_file.write(f"–£—Å–ø–µ—à–Ω–æ: {successful}\n")
        log_file.write(f"–ù–µ—É—Å–ø–µ—à–Ω–æ: {failed}\n")
        log_file.write(f"–§–ª—É–¥–æ–≤: {floods}\n")
        log_file.write(f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {successful + failed + floods}\n")
        log_file.write(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {item_type}: {len(items)}\n")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        document = FSInputFile(log_filename)
        await message.answer_document(
            document,
            caption=f"üìä {method.upper()} –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                   f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}\n"
                   f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {failed}\n"
                   f"üåä –§–ª—É–¥–æ–≤: {floods}\n"
                   f"üìä –í—Å–µ–≥–æ: {successful + failed + floods}\n"
                   f"üìß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {item_type}: {len(items)}\n"
                   f"üîó –¶–µ–ª—å: {link}"
        )
        try:
            await progress_message.delete()
        except:
            pass
    except Exception as e:
        await message.answer(f"üìä –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –ù–æ —Ñ–∞–π–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {e}")
    
    # –ß–∏—Å—Ç–∫–∞
    try:
        os.remove(log_filename)
    except:
        pass
    
    if user_id in active_reports:
        del active_reports[user_id]

async def send_report_task(send_func, item, link, log_filename, item_type):
    result, status = await send_func(item, link)
    current_time = datetime.now().strftime("%H:%M:%S")
    
    with open(log_filename, 'a', encoding='utf-8') as log_file:
        if item_type == "email":
            log_file.write(f"[{current_time}] üìß {item} -> {link} - [{status}]\n")
        else:
            log_file.write(f"[{current_time}] ü§ñ {item} -> {link} - [{status}]\n")
    
    return result, status

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
async def process_support(message: types.Message):
    support_text = (
        f"üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n"
        f"üë§ –û—Ç: @{message.from_user.username}\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üìù –¢–µ–∫—Å—Ç:\n{message.text}"
    )
    
    for admin_id in ADMIN_IDS + [SUPPORT_ID]:
        try:
            await bot.send_message(admin_id, support_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    await message.answer("‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
    
    if message.from_user.id in active_reports:
        del active_reports[message.from_user.id]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    
    if not os.path.exists(sessions_folder):
        os.makedirs(sessions_folder)
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! (–†–µ–∂–∏–º –∏–º–∏—Ç–∞—Ü–∏–∏)")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
